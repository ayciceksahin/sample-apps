// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Storyly
import AVFoundation
import AVKit
import AudioToolbox
import Dispatch
import Foundation
import QuartzCore
@_exported import Storyly
import Swift
import UIKit
import UserNotifications
extension Array {
  @inlinable internal func after(where predicate: (Element) -> Swift.Bool) -> Element? {
        if let index = self.firstIndex(where: predicate), index + 1 <= self.count {
            return index + 1 == self.count ? nil : self[index + 1]
        }
        return nil
    }
}
@objc(StorylyView) final public class StorylyView : UIKit.UIView {
  @objc final public var storylyInit: Storyly.StorylyInit {
    @objc get
    @objc set
  }
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc weak final public var delegate: Storyly.StorylyDelegate?
  @objc weak final public var momentsDelegate: Storyly.StorylyMomentsDelegate?
  @objc weak final public var storylyAdViewProvider: Storyly.StorylyAdViewProvider?
  @objc weak final public var storylyLoadingView: Storyly.StorylyLoadingView? {
    @objc get
    @objc set
  }
  @objc weak final public var storyGroupViewFactory: Storyly.StoryGroupViewFactory? {
    @objc get
    @objc set
  }
  @objc final public var storylyShareUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc override final public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconBorderColorSeen: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconBorderColorNotSeen: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIconBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupTextColorSeen: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupTextColorNotSeen: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupTextFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupTextLines: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupPinIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var storyItemIconBorderColor: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyItemTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyItemTextFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyInteractiveFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var storylyItemProgressBarColor: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupSize: Swift.String {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupIconHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupIconWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupIconCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupTextIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderTextIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderIconIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderCloseButtonIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderCloseButtonIcon: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderShareButtonIcon: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupListPaddingBetweenItems: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupListEdgePadding: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconStyling: Storyly.StoryGroupIconStyling {
    @objc get
    @objc set
  }
  @objc final public var storyGroupTextStyling: Storyly.StoryGroupTextStyling {
    @objc get
    @objc set
  }
  @objc final public var storyHeaderStyling: Storyly.StoryHeaderStyling {
    @objc get
    @objc set
  }
  @objc final public var storyGroupListStyling: Storyly.StoryGroupListStyling {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconColorStyling: Storyly.StoryGroupIconColorStyling {
    @objc get
    @objc set
  }
  @objc final public var storylyLayoutDirection: Storyly.StorylyLayoutDirection {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIVodIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIconImageThematicLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var languageCode: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var momentsItems: [Storyly.MomentsItem]? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension StorylyView {
  @objc override final public func willMove(toWindow newWindow: UIKit.UIWindow?)
}
extension StorylyView {
  @objc final public func refresh()
  final public func openStory(storyGroupId: Swift.String, storyId: Swift.String? = nil, play: Storyly.PlayMode = .Default) -> Swift.Bool
  @objc final public func openStory(payload: Foundation.URL) -> Swift.Bool
  @objc final public func pause()
  @objc final public func resume()
  @objc final public func dismiss(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc final public func present(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  final public func setExternalData(externalData: [[Swift.String : Any?]]) -> Swift.Bool
  @objc final public func showExternalActionView(externalActionView: UIKit.UIView)
  @objc final public func dismissExternalActionView()
  @objc(setExternalData:) final public func setExternalData(externalData: [Foundation.NSDictionary]) -> Swift.Bool
}
@objc public protocol StorylyMomentsDelegate {
  @objc optional func storyHeaderClicked(_ storylyView: Storyly.StorylyView, storyGroup: Storyly.StoryGroup?, story: Storyly.Story?)
}
@objc final public class StoryGroupIconColorStyling : ObjectiveC.NSObject {
  @objc final public var storyGroupIVodIconBorderColorSeen: [UIKit.UIColor]
  @objc final public var storyGroupIVodIconBorderColorNotSeen: [UIKit.UIColor]
  @objc final public var storyGroupIVodIconColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryGroupIconStyling : ObjectiveC.NSObject {
  @objc final public var height: CoreGraphics.CGFloat
  @objc final public var width: CoreGraphics.CGFloat
  @objc final public var cornerRadius: CoreGraphics.CGFloat
  @objc public init(height: CoreGraphics.CGFloat, width: CoreGraphics.CGFloat, cornerRadius: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryGroupTextStyling : ObjectiveC.NSObject {
  @objc final public var isVisible: Swift.Bool
  @objc final public var colorSeen: UIKit.UIColor
  @objc final public var colorNotSeen: UIKit.UIColor
  @objc final public var font: UIKit.UIFont?
  @objc final public var lines: Swift.Int
  @objc public init(isVisible: Swift.Bool = true, colorSeen: UIKit.UIColor = UIColor.black, colorNotSeen: UIKit.UIColor = UIColor.black, font: UIKit.UIFont? = nil, lines: Swift.Int = 2)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryHeaderStyling : ObjectiveC.NSObject {
  @objc final public var isTextVisible: Swift.Bool
  @objc final public var isIconVisible: Swift.Bool
  @objc final public var isCloseButtonVisible: Swift.Bool
  @objc final public var closeButtonIcon: UIKit.UIImage?
  @objc final public var shareButtonIcon: UIKit.UIImage?
  @objc public init(isTextVisible: Swift.Bool, isIconVisible: Swift.Bool, isCloseButtonVisible: Swift.Bool, closeButtonIcon: UIKit.UIImage? = nil, shareButtonIcon: UIKit.UIImage? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryGroupListStyling : ObjectiveC.NSObject {
  @objc final public var edgePadding: CoreGraphics.CGFloat
  @objc final public var paddingBetweenItems: CoreGraphics.CGFloat
  @objc public init(edgePadding: CoreGraphics.CGFloat, paddingBetweenItems: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class MomentsItem : ObjectiveC.NSObject {
  public var momentsView: UIKit.UIView
  @objc public init(momentsView: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol StorylyLoadingView {
  @objc func getView() -> UIKit.UIView
  @objc func show()
  @objc func hide()
}
@objc public protocol StorylyAdViewProvider {
  @objc(onRequest::) func onRequest(adViewListener: Storyly.StorylyAdViewListener, frame: CoreGraphics.CGRect)
}
@objc public protocol StorylyAdViewListener {
  @objc(onLoad:) func onLoad(adView: Storyly.StorylyAdView)
}
@objc public protocol StorylyAdView {
  @objc var onActionClicked: (() -> Swift.Void)? { get set }
  @objc func getView() -> UIKit.UIView
  @objc func getIcon() -> Foundation.URL
  @objc func getTitle() -> Swift.String
  @objc func getCustomData() -> [Swift.String : Any]
  @objc func destroy()
  @objc func load() -> Swift.Int
  @objc func pause()
  @objc func reset()
  @objc func resume()
  @objc func setLayers(layers: [Swift.String : UIKit.UIView])
  @objc func checkHit(touch: UIKit.UITouch) -> Swift.Bool
}
@objc public protocol StorylyDelegate {
  @available(*, unavailable, message: "This function is removed in v1.18.0; please use the storylyLoaded with dataSource parameter")
  @objc optional func storylyLoaded(_ storylyView: Storyly.StorylyView, storyGroupList: [Storyly.StoryGroup])
  @objc optional func storylyLoaded(_ storylyView: Storyly.StorylyView, storyGroupList: [Storyly.StoryGroup], dataSource: Storyly.StorylyDataSource)
  @objc optional func storylyLoadFailed(_ storylyView: Storyly.StorylyView, errorMessage: Swift.String)
  @objc optional func storylyActionClicked(_ storylyView: Storyly.StorylyView, rootViewController: UIKit.UIViewController, story: Storyly.Story)
  @objc optional func storylyStoryPresented(_ storylyView: Storyly.StorylyView)
  @objc optional func storylyStoryPresentFailed(_ storylyView: Storyly.StorylyView, errorMessage: Swift.String)
  @objc optional func storylyStoryDismissed(_ storylyView: Storyly.StorylyView)
  @objc optional func storylyUserInteracted(_ storylyView: Storyly.StorylyView, storyGroup: Storyly.StoryGroup, story: Storyly.Story, storyComponent: Storyly.StoryComponent)
  @objc optional func storylyEvent(_ storylyView: Storyly.StorylyView, event: Storyly.StorylyEvent, storyGroup: Storyly.StoryGroup?, story: Storyly.Story?, storyComponent: Storyly.StoryComponent?)
}
@objc final public class StorylyInit : ObjectiveC.NSObject {
  @objc final public var segmentation: Storyly.StorylySegmentation {
    @objc get
    @objc set
  }
  @objc final public var userData: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public init(storylyId: Swift.String)
  @objc public init(storylyId: Swift.String, segmentation: Storyly.StorylySegmentation = StorylySegmentation(segments: nil), customParameter: Swift.String? = nil, isTestMode: Swift.Bool = false, storylyPayload: Swift.String? = nil, userData: [Swift.String : Swift.String] = [:])
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StorylySegmentation : ObjectiveC.NSObject {
  @objc public init(segments: Swift.Set<Swift.String>?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol StoryGroupViewFactory {
  @objc func createView() -> Storyly.StoryGroupView
  @objc func getSize() -> CoreGraphics.CGSize
}
@objc open class StoryGroupView : UIKit.UIView {
  @objc open func populateView(storyGroup: Storyly.StoryGroup?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum StorylyEvent : Swift.Int {
  case StoryGroupOpened
  case StoryGroupUserOpened
  case StoryGroupDeepLinkOpened
  case StoryGroupProgrammaticallyOpened
  case StoryGroupCompleted
  case StoryGroupPreviousSwiped
  case StoryGroupNextSwiped
  case StoryGroupClosed
  case StoryImpression
  case StoryViewed
  case StoryCompleted
  case StoryPreviousClicked
  case StoryNextClicked
  case StoryPaused
  case StoryResumed
  case StoryShared
  case StoryCTAClicked
  case StoryEmojiClicked
  case StoryPollAnswered
  case StoryQuizAnswered
  case StoryCountdownReminderAdded
  case StoryCountdownReminderRemoved
  case StoryRated
  case StoryInteractiveImpression
  case StoryProductTagExpanded
  case StoryProductTagClicked
  case StoryPromoCodeCopied
  case StoryCommentSent
  case StoryCommentInputOpened
  case StoryCommentInputClosed
  case StorylyIVodReplayButtonClicked
  case StorylyIVodSeeked
  case StoryLiked
  case StoryUnliked
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class StorylyEventHelper : ObjectiveC.NSObject {
  @objc public static func storylyEventName(event: Storyly.StorylyEvent) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum StoryType : Swift.Int, Swift.Decodable {
  case Unknown
  case Image
  case Video
  case Vod
  case Ad
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StoryGroupSize : Swift.Int {
  case Small
  case Large
  case Custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StorylyLayoutDirection : Swift.Int {
  case LTR
  case RTL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class StoryGroup : ObjectiveC.NSObject {
  @objc final public let groupTheme: Swift.String?
  @objc final public let uniqueId: Swift.String
  @objc final public let title: Swift.String
  @objc final public let iconUrl: Foundation.URL
  @objc final public let thematicIconUrls: [Swift.String : Foundation.URL]?
  @objc final public let coverUrl: Foundation.URL?
  @objc final public let index: Swift.Int
  @objc final public let seen: Swift.Bool
  @objc final public let stories: [Storyly.Story]
  @objc final public let pinned: Swift.Bool
  @objc final public let type: Storyly.StoryGroupType
  @objc public init(groupTheme: Swift.String?, id: Swift.String, title: Swift.String, iconUrl: Foundation.URL, thematicIconUrls: [Swift.String : Foundation.URL]?, coverUrl: Foundation.URL?, index: Swift.Int, seen: Swift.Bool, stories: [Storyly.Story], pinned: Swift.Bool, type: Storyly.StoryGroupType)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class Story : ObjectiveC.NSObject {
  @objc final public let uniqueId: Swift.String
  @objc final public let title: Swift.String
  @objc final public let name: Swift.String?
  @objc final public let index: Swift.Int
  @objc final public let seen: Swift.Bool
  @objc final public let currentTime: Swift.Int
  @objc final public let media: Storyly.StoryMedia
  @objc public init(id: Swift.String, index: Swift.Int, title: Swift.String, name: Swift.String?, seen: Swift.Bool, currentTime: Swift.Int, media: Storyly.StoryMedia)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryMedia : ObjectiveC.NSObject {
  @objc final public let type: Storyly.StoryType
  @objc final public let storyComponentList: [Storyly.StoryComponent]?
  @objc final public let actionUrlList: [Swift.String]?
  @objc final public let actionUrl: Swift.String?
  @objc final public var previewUrl: Foundation.URL?
  @objc public init(type: Storyly.StoryType, storyComponentList: [Storyly.StoryComponent]?, actionUrlList: [Swift.String]?, actionUrl: Swift.String?, previewUrl: Foundation.URL?)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class StoryComponent : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let type: Storyly.StoryComponentType
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum StoryComponentType : Swift.Int {
  case Undefined
  case Quiz
  case Poll
  case Emoji
  case Rating
  case PromoCode
  case SwipeAction
  case ButtonAction
  case Text
  case Image
  case Countdown
  case ProductTag
  case Comment
  case Video
  case Vod
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class StoryComponentTypeHelper : ObjectiveC.NSObject {
  @objc public static func storyComponentName(componentType: Storyly.StoryComponentType) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class StoryQuizComponent : Storyly.StoryComponent {
  @objc final public let title: Swift.String
  @objc final public let options: [Swift.String]
  @objc final public let rightAnswerIndex: Foundation.NSNumber?
  @objc final public let selectedOptionIndex: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(id: Swift.String, title: Swift.String, options: [Swift.String], rightAnswerIndex: Foundation.NSNumber?, selectedOptionIndex: Swift.Int, customPayload: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class StoryPollComponent : Storyly.StoryComponent {
  @objc final public let title: Swift.String
  @objc final public let options: [Swift.String]
  @objc final public let selectedOptionIndex: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(id: Swift.String, title: Swift.String, options: [Swift.String], selectedOptionIndex: Swift.Int, customPayload: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class StoryEmojiComponent : Storyly.StoryComponent {
  @objc final public let emojiCodes: [Swift.String]
  @objc final public let selectedEmojiIndex: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(id: Swift.String, emojiCodes: [Swift.String], selectedEmojiIndex: Swift.Int, customPayload: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class StoryRatingComponent : Storyly.StoryComponent {
  @objc final public let emojiCode: Swift.String
  @objc final public let rating: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(id: Swift.String, emojiCode: Swift.String, rating: Swift.Int, customPayload: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class StoryPromoCodeComponent : Storyly.StoryComponent {
  @objc final public let text: Swift.String
  @objc public init(id: Swift.String, text: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class StoryCommentComponent : Storyly.StoryComponent {
  @objc final public let text: Swift.String
  @objc public init(id: Swift.String, text: Swift.String)
  @objc deinit
}
@objc public enum PlayMode : Swift.Int, Swift.RawRepresentable, Swift.Decodable {
  case Default
  case StoryGroup
  case Story
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Storyly.PlayMode.RawValue)
}
@objc public enum StoryGroupType : Swift.Int, Swift.Decodable {
  case Default
  case IVod
  case Ad
  case MomentsDefault
  case MomentsBlock
  case Error
  public init(from decoder: Swift.Decoder) throws
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StorylyDataSource : Swift.Int {
  case API
  case MomentsAPI
  case Local
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Storyly.StoryGroupSize : Swift.Equatable {}
extension Storyly.StoryGroupSize : Swift.Hashable {}
extension Storyly.StoryGroupSize : Swift.RawRepresentable {}
extension Storyly.StorylyLayoutDirection : Swift.Equatable {}
extension Storyly.StorylyLayoutDirection : Swift.Hashable {}
extension Storyly.StorylyLayoutDirection : Swift.RawRepresentable {}
extension Storyly.StorylyEvent : Swift.Equatable {}
extension Storyly.StorylyEvent : Swift.Hashable {}
extension Storyly.StorylyEvent : Swift.RawRepresentable {}
extension Storyly.StoryType : Swift.Equatable {}
extension Storyly.StoryType : Swift.Hashable {}
extension Storyly.StoryType : Swift.RawRepresentable {}
extension Storyly.StoryComponentType : Swift.Equatable {}
extension Storyly.StoryComponentType : Swift.Hashable {}
extension Storyly.StoryComponentType : Swift.RawRepresentable {}
extension Storyly.PlayMode : Swift.Equatable {}
extension Storyly.PlayMode : Swift.Hashable {}
extension Storyly.StoryGroupType : Swift.Equatable {}
extension Storyly.StoryGroupType : Swift.Hashable {}
extension Storyly.StoryGroupType : Swift.RawRepresentable {}
extension Storyly.StorylyDataSource : Swift.Equatable {}
extension Storyly.StorylyDataSource : Swift.Hashable {}
extension Storyly.StorylyDataSource : Swift.RawRepresentable {}
