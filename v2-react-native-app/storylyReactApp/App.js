/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import { View, Button, Image, Text, PixelRatio, SafeAreaView, Dimensions } from 'react-native';
import { Storyly } from 'storyly-react-native';

const PIN_ICON = require('./assets/pin_icon.png'); 
const HOVER_IMG = require('./assets/watch.jpg'); 

const windowWidth = Dimensions.get('window').width;
const windowHeight = Dimensions.get('window').height;


const STORYLY_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhY2NfaWQiOjc2MCwiYXBwX2lkIjo0MDUsImluc19pZCI6NDA0fQ.1AkqOy_lsiownTBNhVOUKc91uc9fDcAxfQZtpm3nj40"

const convertToNative = (size) => {
   return Platform.OS === 'android' ? PixelRatio.getPixelSizeForLayoutSize(size) : size
}


const CustomPortraitView = ({ storyGroup }) => {
   return (
       <>
           {(storyGroup ? (
            <View style={{ width:'100%', height: 100, borderColor:"black", borderWidth:0.3, borderRadius:100 }}>
                
             <><Image style={{
               width: 100,
               height: "100%",
               borderRadius: 100
               }}
               source={{ uri: storyGroup.iconUrl }} 
               />
               <View style={{ width: 100, height: 100, borderRadius: 100, position: 'absolute', flexDirection:'row', backgroundColor: storyGroup.seen ? "#16ad055f" : "#1905ad5f" }}>
                 <View style={{ flexDirection: 'column', width: 90, marginLeft: 5, height: "100%", alignItems: 'center', justifyContent: 'flex-start' }}>
                   {storyGroup.pinned ?
                     <Image style={{ width: 20, height: 20, marginTop: 10, marginBottom: 10, borderRadius: 10 }} source={PIN_ICON} />
                     :
                     <View style={{ width: 20, height: 1, marginTop: 5, marginBottom: 10 }} />}
                 </View>

                 <View style={{ flexDirection: 'column', width: 100, marginLeft: 5, height: "100%", alignItems: 'center', justifyContent: 'center' }}>
                     <Text style={{ marginBottom: 5, flexWrap: 'wrap', width: "90%", textAlign: 'center', fontSize: 20, color: "black" }}>{storyGroup.title}</Text>
                 </View>
               </View></>
                   
            </View>
           ) : (
               <View style={{width: "100%", height: "100%",  borderRadius: 8 }}></View>
           ))}
       </>
   )
}

//You can add/change your labels according to your use cases. Then you can re-init Storyly when "Labels" is change to real time setting.
const Labels = ['newUser', 'goldMember']


export default class App extends Component {
    render() {
        return (
            <SafeAreaView style={{ width: '100%', height:'100%' }}>
            <Storyly
                    ref={ref => { this.storyly = ref }}
                    style={{ width: '100%', height:'100%', marginTop: 10, marginBottom: 10}}
                    storylyId={STORYLY_TOKEN}
                    storyGroupListOrientation='vertical'
                    storyGroupViewFactory={{
                       width: convertToNative(windowWidth),
                       height: convertToNative(100),
                       customView: CustomPortraitView
                   }}
                    storylySegments= {Labels}
                    onLoad={loadEvent => {
                        console.log(`[Storyly] onLoad`);
                    }}
                    onFail={errorMessage => {
                        console.log(`[Storyly] onFail ${errorMessage}`);
                    }}
                    onPress={pressEvent => {
                        console.log(`[Storyly] onPress ${JSON.stringify(pressEvent)}`);
                    }}
                    onEvent={eventPayload => {
                        console.log(`[Storyly] onEvent ${JSON.stringify(eventPayload)}`);
                    }}
                    onStoryOpen={() => {
                        console.log("[Storyly] onStoryOpen");
                    }}
                    onStoryClose={() => {
                        console.log("[Storyly] onStoryClose");
                    }}
                    onStoryOpenFailed={(message) => {
                        console.log(`[Storyly] onStoryOpenFailed ${message}`)
                    }}
                    onUserInteracted={interactionEvent => {
                        console.log(`[Storyly] onStoryUserInteracted ${JSON.stringify(interactionEvent)}`);
                    }}/>
                <Button
                    //You can use refresh() method when "Labels" is change to real time setting.
                    onPress={() => { this.storyly.refresh(); }}
                    title="Refresh"
                />
            </SafeAreaView>
        );
    }
}